
.. _program_listing_file_README.md:

Program Listing for File README.md
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_README.md>` (``README.md``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: markdown

   # Self-Gravity Solver
   
   This project implements a self-gravity solver in C, likely using a tree-based method for calculating gravitational forces. It includes modules for handling gravitational calculations, grid operations, and tree structures. A Python script is provided for visualization of the results.
   
   ## Files:
   - `gravity.c`, `gravity.h`: Core gravity calculation logic.
   - `grid.c`, `grid.h`: Grid-related operations.
   - `tree.c`, `tree.h`: Tree data structure implementation (e.g., for N-body simulations).
   - `vector.h`: Vector utility functions.
   - `main.c`: Main program entry point.
   - `visualize.py`: Python script for visualizing results.
   - `CMakeLists.txt`: CMake build configuration.
   
   ## Building the Project
   
   This project uses CMake for its build system. To build the `gravity_solver` executable, follow these steps:
   
   1. Create a build directory:
      ```bash
      mkdir build
      cd build
      ```
   
   2. Run CMake to configure the project:
      ```bash
      cmake ..
      ```
   
   3. Build the project:
      ```bash
      make
      ```
   
      This will create the `gravity_solver` executable in the `build/` directory.
   
   ## Running the Solver
   
   After building, you can run the solver from the `build/` directory:
   
   ```bash
   ./gravity_solver
   ```
   
   ## Visualization
   
   The `visualize.py` script can be used to visualize the output data (e.g., `potential.dat`, `density.dat`). Make sure you have the necessary Python libraries installed (e.g., `matplotlib`, `numpy`).
   
   ```bash
   python ../visualize.py
   ```
   
   ## Sample Visualization
   
   Here's a sample visualization of the density and potential fields:
   
   ![Density and Potential Slice](density_potential_slice.png)
   
   ## Algorithm Used
   
   This solver likely employs a tree-based N-body simulation algorithm, such as the Barnes-Hut algorithm or a Fast Multipole Method (FMM) variant. These methods reduce the computational complexity of calculating gravitational forces from O(N^2) to O(N log N) or O(N) respectively, by grouping distant particles and approximating their gravitational influence. The core idea is to use a hierarchical data structure (a tree) to represent the spatial distribution of particles.
   
   ## Tree Decomposition
   
   The `tree.c` and `tree.h` files are responsible for constructing and managing the hierarchical tree data structure. This tree (e.g., an octree in 3D or a quadtree in 2D) recursively subdivides the simulation domain into smaller cells. Each node in the tree represents a region of space and stores properties like the total mass and center of mass of all particles within that region. During force calculation, interactions between particles are computed by traversing this tree. For distant interactions, a group of particles (represented by a tree node) can be treated as a single, massive particle, significantly reducing the number of individual force calculations.
   
   ---
   **Disclaimer:** This repo has been entirely generated by Gemini.
